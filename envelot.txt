######################################################source("/Users/davidesteban/Documents/David/Tesis Mestrado/Codigos/codigoEMDavidcap2.R")maha<-function(y,x,alpha,beta,Sigma){    n = dim(y)[1]      d=matrix(0,n,1)  for (hh in 1:n){          mu<-alpha+beta*x[hh]    d[hh] = as.numeric(t(y[hh,]-mu)%*%solve(Sigma)%*%(y[hh,]-mu))  }    return(d)}enveld<-function(p,d,nu,dist){    d<-d  n <-length(d)  d2s=sort(d)  # distancia de mahalanobis  xq2 <- qchisq(ppoints(n), p)    Xsim<-matrix(0,100,n)  if(dist=="Bst"){    for(i in 1:100){      Xsim[i,]=apply(rSMNBS(n,mu=rep(0, p),Sigma=diag(rep(1,p)), nu)^2,1,sum)    }  }  if(dist=="Normal"){    for(i in 1:100){      Xsim[i,]=apply(gerahelton(n,p,mu=rep(0, p),Sigma=diag(rep(1,p)), nu,"Normal")^2,1,sum)    }  }  if(dist=="Student"){    for(i in 1:100){      Xsim[i,]=apply(gerahelton(n,p,mu=rep(0, p),Sigma=diag(rep(1,p)), nu,"Student")^2,1,sum)    }  }  if(dist=="Slash"){    for(i in 1:100){      Xsim[i,]=apply(gerahelton(n,p,mu=rep(0, p),Sigma=diag(rep(1,p)), nu,"Slash")^2,1,sum)    }  }  if(dist=="Cont"){    for(i in 1:100){      Xsim[i,]=apply(gerahelton(n,p,mu=rep(0, p),Sigma=diag(rep(1,p)), nu,"Cont")^2,1,sum)    }  }  Xsim2<-apply(Xsim,1,sort)  d21<-matrix(0,n,1)  d22<-matrix(0,n,1)  for(i in 1:n){    d21[i]  <- quantile(Xsim2[i,],0.05)    d22[i]  <- quantile(Xsim2[i,],0.95)  }      #########################comandos gerais############################    d2med <-apply(Xsim2,1,mean)    fy <- range(d2s,d21,d22)  if(dist=="Bst"){    plot(xq2,d2s,xlab = expression(paste("Theoretical quantiles")),         ylab="Sample quantiles",main="SMNBS",pch=20,ylim=fy)}  if(dist=="Normal"){    plot(xq2,d2s,xlab = expression(paste("Theoretical quantiles")),         ylab="Sample quantiles",main="Normal",pch=20,ylim=fy)}  if(dist=="Student"){    plot(xq2,d2s,xlab = expression(paste("Theoretical quantiles")),         ylab="Sample quantiles",main="St",pch=20,ylim=fy)}  if(dist=="Slash"){    plot(xq2,d2s,xlab = expression(paste("Theoretical quantiles")),         ylab="Sample quantiles",main="SL",pch=20,ylim=fy)}  if(dist=="Cont"){    plot(xq2,d2s,xlab = expression(paste("Theoretical quantiles")),         ylab="Sample quantiles",main="CN",pch=20,ylim=fy)}  par(new=T)  plot(xq2,d21,type="l",ylim=fy,xlab="",ylab="")  par(new=T)  plot(xq2,d2med,type="l",ylim=fy,xlab="",ylab="")  par(new=T)  plot(xq2,d22,type="l",ylim=fy,xlab="",ylab="")  title("")  }###########veroenvel<-function(t,alpha,beta,Sigma,nu){    mm=dim(t)[1]  p=dim(t)[2]      epsilon=matrix(0,mm,p)  at=matrix(0,mm,p)  Atparte=matrix(0,mm,p)  vero1=matrix(0,mm,1)          lambda1=(-p+1)/2  lambda2=(-p-1)/2  a1=(2*pi)^(-p/2)*(nu^((p-1)/2)*besselK(nu^(-2),1/2))^(-1)  a2=(2*pi)^(-p/2)*(nu^((p+1)/2)*besselK(nu^(-2),-1/2))^(-1)    for (d in 1:mm){    mu = matrix(0, n, p)    for (i in 1:n) {      mu[i, ] = alpha + beta * x[i]    }    dt1=as.numeric((t[d,]-mu[d,])%*%solve(Sigma)%*%t(t[d,]-mu[d,]))    qt=sqrt(nu^(-2)+dt1)    omega=nu^(-1)*qt	    f1=a1*qt^lambda1*besselK(omega,lambda1)    f2=a2*qt^lambda2*besselK(omega,lambda2)    funk=f1+f2        vero1[d]=-0.5*log(det(Sigma))+log(0.5*funk)      }    #vero=sum(vero1)  return(vero1)}veroheltonenvel<-function(t,mu,Sigma,nu,dist){    mm=dim(t)[1]  p=dim(t)[2]    eta=matrix(0,mm,p)  epsilon=matrix(0,mm,p)  at=matrix(0,mm,p)  Atparte=matrix(0,mm,p)  vero1=matrix(0,mm,1)  dt=matrix(0,mm,1)  funk=matrix(0,mm,1)      for (d in 1:mm){            dt[d]=mahalanobis(t[d,],mu[d,],Sigma)    #as.numeric((t[d,]-mu[d,])%*%solve(Sigma)%*%t(t[d,]-mu[d,]))      if (dist == "Normal"){#funk[d]=dnorm(sqrt(dt[d]))        funk[d]=dmvnorm((t[d,]-mu), mean = rep(0, p) , sigma =Sigma)}     if (dist == "Student"){funk[d]=(pi^(-p/2)*nu^(nu/2)*gamma((nu+p)/2))/(gamma(nu/2)*(dt[d]+nu)^((nu+p)/2))}    if (dist == "Slash"){funk[d]=(2*pi)^(-p/2)*(  (nu*2^(nu+(p/2))*gamma( nu+(p/2) )  )/dt[d]^(nu+(p/2)) )*fp1(a=nu+(p/2),b=dt[d]/2)}    if (dist == "Cont"){nu1=nu[1]    gama=nu[2]    #funk[d]=(nu1*dnorm(sqrt(dt[d]),0,(1/sqrt(gama)))+(1-nu1)*dnorm(sqrt(dt[d])))    funk[d]=nu1*dmvnorm((t[d,]-mu), mean = rep(0, p) , sigma =(gama^(-1))*Sigma)+(1-nu1)*dmvnorm((t[d,]-mu), mean = rep(0, p) , sigma =Sigma)}    if(p>1){      vero1[d]=-0.5*log(det(Sigma))+log(funk[d])      if ((dist == "Normal")|| (dist == "Cont")){        vero1[d]=log(funk[d])      }          }else{vero1[d]=log(funk[d])}      }      return(vero1)}envelopes<-function(t,alpha,beta,Sigma,nu,dist){  n=dim(t)[1]  p=dim(t)[2]
  mu = matrix(0, n, p)  for (d in 1:n){        mu[d, ] = alpha + beta * x[d]}


  if(dist=="Bst"){    u=veroenvel(t,alpha,beta,Sigma,nu)  }  if(dist=="Normal"){    u=veroheltonenvel(t,mu,Sigma,nu,"Normal")  }  if(dist=="Student"){    u=veroheltonenvel(t,mu,Sigma,nu,"Student")  }  if(dist=="Slash"){    u=veroheltonenvel(t,mu,Sigma,nu,"Slash")  }  if(dist=="Cont"){    u=veroheltonenvel(t,mu,Sigma,nu,"Cont")  }  empiricau=ecdf(u)  plot(empiricau,u,xlab="Log density",ylab="ECDF",main="")        for(i in 1:500){            if(dist=="Bst"){      source("/Users/davidesteban/Documents/David/Tesis Mestrado/Codigos/codigoEMDavidcap2.R")      tnovo=gera(n,p,alpha,beta,Sigma,nu)      v=veroenvel(tnovo,alpha,beta,Sigma,nu)    }    if(dist=="Normal"){      source("/Users/davidesteban/Documents/David/Tesis Mestrado/Codigos/codigosotrasdistcap2.R")      tnovo=gerahelton(n,p,alpha,beta,Sigma,nu,"Normal")      v=veroheltonenvel(tnovo,mu,Sigma,nu,"Normal")    }    if(dist=="Student"){      source("/Users/davidesteban/Documents/David/Tesis Mestrado/CAPM/tcapm.txt")      tnovo=gerahelton(n,p,mu,Sigma,nu,"Student")      v=veroheltonenvel(tnovo,mu,Sigma,nu,"Student")    }    if(dist=="Slash"){      source("/Users/davidesteban/Documents/David/Tesis Mestrado/Codigos/codigosotrasdistcap2.R")      tnovo=gerahelton(n,p,mu,Sigma,nu,"Slash")      v=veroheltonenvel(tnovo,alpha,beta,Sigma,nu,"Slash")    }    if(dist=="Cont"){      source("/Users/davidesteban/Documents/David/Tesis Mestrado/Codigos/codigosotrasdistcap2.R")      tnovo=gerahelton(n,p,mu,Sigma,nu,"Cont")      v=veroheltonenvel(tnovo,alpha,beta,Sigma,nu,"Cont")    }    empiricav=ecdf(v)    par(new=TRUE)    plot(empiricav,v,xlab="",ylab="",main="",col="lightgray",axes=F)    print(i)  }  par(new=TRUE)  plot(empiricau,u,xlab="",ylab="",main="",axes=F)  }