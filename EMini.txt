EMini = function(y, mu, Sigma, nu, pii,g,iter.max=100,error=0.001,condi=FALSE, equal=FALSE){

# este algoritmo tem como criterio de parada um número máximo de iterações 
#nu=c(eta,omega,omega)  # considerando a reparametrização psi=gamma
# condi=T, temos que eta é conhecido, portanto estima somente omega
# condi=F, temos que eta é desconhecido, portanto, estima eta e omega
# equal=T, temos que omegas são iguais



count = 0  

n = dim(y)[1]    
p = dim(y)[2]

### outra atualização do nu, ou seja, do eta e omega

tal <- matrix(0, n, g)
S1 <- matrix(0, n, g)
S2<- matrix(0, n, g)
S4 <- matrix(0, n, g)
omegaaux=c() 

for (j in 1:g){

 ### E-step

         eta0 = nu[[j]][1]
          omega=nu[[j]][2]
          dj <- mahalanobis(y, mu[[j]], Sigma[[j]])
          qy = sqrt(omega + dj)      
          aux1 = qy*(omega)^(1/2)      
          ct1 = matrix((omega^(1/2)/qy)^(eta0-p/2)*(1/(2*besselK(aux1, eta0-p/2))),n,1)      
          ct2 = matrix((omega^(1/2)/qy)^(eta0-(p/2)-1)*(1/(2*besselK(aux1, eta0-(p/2)-1))),n,1)
          ct4 = matrix((omega^(1/2)/qy)^(eta0-(p/2)+1)*(1/(2*besselK(aux1, eta0-(p/2)+1))),n,1)        

         u = matrix(0,n,1)      # valor esperado de u-1
         v = matrix(0,n,1)     # valor esperado de u
         s = matrix(0,n,1)     # valor esperado de log(u)
         derivada=matrix(0,n,1)

          u = (ct1/ct2)
          v = (ct1/ct4)

for (hh in 1:n){      
         
          phi4=eta0-p/2
          f<-function(phi4){

                                    besselK(aux1[hh], phi4)

                                   }

         derivada[hh]<-grad(f, phi4)
         s[hh]=log(qy[hh]/sqrt(omega))+  ( (1/besselK(aux1[hh],eta0-p/2))*derivada[hh] )

                        }

          nu0=c(eta0,omega)
          d1 <- dmv_SNGH(y, mu[[j]], Sigma[[j]], nu0)
          if(length(which(d1 == 0)) > 0) d1[which(d1 == 0)] <- .Machine$double.xmin
          
          d2 <-  d.mixedmvSNGH(y, pii, mu, Sigma, nu)
          if(length(which(d2 == 0)) > 0) d2[which(d2 == 0)] <- .Machine$double.xmin

          tal[,j] <- d1*pii[j] / d2
          S1[,j] <- tal[,j]*u   
          S2[,j] <- tal[,j]*s
          S4[,j] <- tal[,j]*v


 if (condi==TRUE){
omegaaux[j] <- optim(omega, method = "L-BFGS-B", maxfuni, lower =0.01, upper =3, eta=eta0, tal=tal[,j],S1=S1[,j],S4=S4[,j],S2=S2[,j],hessian=TRUE)$par    
nu[[j]]=c(eta0,omegaaux[j])
           }
else{ 
nu1=c(eta0,omega)
nu[[j]] <- optim(nu1, method = "L-BFGS-B", maxfmulti, lower =c(-1,0.01), upper =c(1,3), tal=tal[,j],S1=S1[,j],S4=S4[,j],S2=S2[,j],hessian=TRUE)$par
}

}




  
 while((count <= iter.max)){


count <- count + 1
#print(count)



tal <- matrix(0, n, g)
S1 <- matrix(0, n, g)
S2<- matrix(0, n, g)
S4 <- matrix(0, n, g)


for (j in 1:g){

 ### E-step

         eta0 = nu[[j]][1]
          omega=nu[[j]][2]
          dj <- mahalanobis(y, mu[[j]], Sigma[[j]])
          qy = sqrt(omega + dj)      
          aux1 = qy*(omega)^(1/2)      
          ct1 = matrix((omega^(1/2)/qy)^(eta0-p/2)*(1/(2*besselK(aux1, eta0-p/2))),n,1)      
          ct2 = matrix((omega^(1/2)/qy)^(eta0-(p/2)-1)*(1/(2*besselK(aux1, eta0-(p/2)-1))),n,1)
          ct4 = matrix((omega^(1/2)/qy)^(eta0-(p/2)+1)*(1/(2*besselK(aux1, eta0-(p/2)+1))),n,1)        

         u = matrix(0,n,1)      # valor esperado de u-1
         v = matrix(0,n,1)     # valor esperado de u
         s = matrix(0,n,1)     # valor esperado de log(u)
         derivada=matrix(0,n,1)

          u = (ct1/ct2)
          v = (ct1/ct4)

for (hh in 1:n){      
         
          phi4=eta0-p/2
          f<-function(phi4){

                                    besselK(aux1[hh], phi4)

                                   }

         derivada[hh]<-grad(f, phi4)
         s[hh]=log(qy[hh]/sqrt(omega))+  ( (1/besselK(aux1[hh],eta0-p/2))*derivada[hh] )

                        }

          nu0=c(eta0,omega)
          d1 <- dmv_SNGH(y, mu[[j]], Sigma[[j]], nu0)
          if(length(which(d1 == 0)) > 0) d1[which(d1 == 0)] <- .Machine$double.xmin
          
          d2 <-  d.mixedmvSNGH(y, pii, mu, Sigma, nu)
          if(length(which(d2 == 0)) > 0) d2[which(d2 == 0)] <- .Machine$double.xmin

          tal[,j] <- d1*pii[j] / d2
          S1[,j] <- tal[,j]*u   
          S2[,j] <- tal[,j]*s
          S4[,j] <- tal[,j]*v

 ### M-step: atualizar os parametros ###
          pii[j] <- (1/n)*sum(tal[,j])           

          mu[[j]] <-apply(S1[,j]*y, 2, sum) / sum(S1[,j])        
          
          sum2 <- matrix(0,p,p)
          for (i in 1:n) {sum2 <- sum2 + (S1[i,j]*(y[i,] - mu[[j]])%*%t(y[i,] - mu[[j]]) )

          Sigma[[j]] <- sum2 / sum(tal[,j])          
        
        }

}

       
           GS <- 0
           GS1 <- 0
           for (j in 1:g) {GS <- GS+kronecker(tal[,j],Sigma[[j]])
                                GS1 <- GS1+kronecker(S1[,j],mu[[j]])
                              }
           Sigma.uni <- t(rowSums(array(t(GS),dim=c(p,p,n)),dims=2))/n
           mu.uni <- t(rowSums(array(t(GS1),dim=c(1,p,n)),dims=2))/sum(apply(S1,2,sum))
           for (j in 1:g){
             mu[[j]]<-mu.uni
             Sigma[[j]] <- Sigma.uni     
                           }



 if (condi==TRUE){

omegaaux=c() 

for (j in 1:g){

eta0aux=nu[[j]][1]  
 
if ( abs(eta0aux)==0.5){  
	if (equal==TRUE) {# caso BS
	omegaaux[j] = ((mean(S1) + mean(S4))/mean(tal) - 2)^(-1)
	} else{
	omegaaux[j] = (  (sum(S1[,j])/sum(tal[,j])) + (sum(S4[,j])/sum(tal[,j])) - 2)^(-1)}                                               }
else{
# ou qualquer outro valor conhecido e fixo

omega=nu[[j]][2]
if (equal==TRUE) { omegaaux[j] <- optim(omega, method = "L-BFGS-B", maxfuni, lower =0.01, upper =3, eta=eta0aux, tal=tal,S1=S1,S4=S4,S2=S2,hessian=TRUE)$par  }
else{
omegaaux[j] <- optim(omega, method = "L-BFGS-B", maxfuni, lower =0.01, upper =3, eta=eta0aux, tal=tal[,j],S1=S1[,j],S4=S4[,j],S2=S2[,j],hessian=TRUE)$par  }           

}

nu[[j]]=c(eta0aux,omegaaux[j])
           }
               } else {

for (j in 1:g){
eta1=nu[[j]][1]
omega1=nu[[j]][2]
nu1=c(eta1,omega1)
nu[[j]] <- optim(nu1, method = "L-BFGS-B", maxfmulti, lower =c(-1,0.01), upper =c(1,3), tal=tal[,j],S1=S1[,j],S4=S4[,j],S2=S2[,j],hessian=TRUE)$par
}
                              }



pii[g] <- 1 - (sum(pii) - pii[g])



zero.pos <- NULL
zero.pos <- which(pii == 0)
if(length(zero.pos) != 0){
pii[zero.pos] <- 1e-10
pii[which(pii == max(pii))] <- max(pii) - sum(pii[zero.pos])
                         }


}


result = list(mu = mu, Sigma = Sigma, nu=nu,pii=pii)
  
  return(result)

}

################################################################################
## Funcao para maximizar
################################################################################


maxfuni<-function(omega,eta,tal,S1,S4,S2){ 
  soma<-(eta-1)*mean(S2)-log(besselK(omega, eta))*mean(tal)-0.5*omega*(mean(S1)+mean(S4))
	return(-soma)
}

maxfmulti<-function(nu,tal,S1,S4,S2){
   eta<-nu[1]
   omega<-nu[2]
   soma<-(eta-1)*mean(S2)-log(besselK(omega, eta))*mean(tal)-0.5*omega*(mean(S1)+mean(S4))
    return(-soma)
}







aprox.inicialsmngig = function(y,condi=F,g1){

# condi=T, temos que eta é conhecido, portanto estima somente omega
# condi=F, temos que eta é desconhecido, portanto, estima eta e omega



  print("aprox.inicial")
  

  
  #### chute inicial para mu e Sigma  via normal
  modeln<-smsn.mmix(y, nu=1, mu =NULL, Sigma = NULL, shape = NULL, pii = NULL, g = g1, get.init = TRUE, criteria = FALSE,
                      group = FALSE, family = "Normal", error = 0.0001, iter.max = 100, uni.Gama = T, calc.im=FALSE,
                      obs.prob= FALSE, kmeans.param = NULL)

mu=modeln$mu
Sigma=modeln$Sigma[[1]]
pii=modeln$pii
alpha=matrix(rep(1,p),p,1)
beta=matrix(rep(1,p),p,1)   
 if (condi==TRUE){
   resini=EMini(y, x, alpha, beta, Sigma, nu, pii,g=g1,iter.max=70,error=0.0001,condi=T, equal=F)}
else{
 resini=EMini(y, x, alpha, beta, Sigma, nu, pii,g=g1,iter.max=70,error=0.0001,condi=F, equal=F)}


    muini=Sigmaini=piini=nuini=alphaini=betaini=list()


    if(class(resini) != "try-error"){
      muini = resini$mu
      Sigmaini = resini$Sigma
     nuini = resini$nu
      piini=resini$pii
      alphaini=resini$alpha
      betaini=resini$beta
      result = list(mu = muini, Sigma = Sigmaini, nu= nuini,pii=piini, alpha=alphaini, beta=betaini)
      return(result)
    }else{
      return("NULL")
    }
  #} else{
  #  return("NULL")
  #}
}